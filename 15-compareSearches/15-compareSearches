#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define SIZE 1000
#define SWAP(x,y,t) ((t)=(x), (x)=(y), (y)=(t))
int comparecount; //quick정렬을 위한 비교횟수

void printArray(int* array) {
	printf("Array Sorting Result :\n");

	for (int i = 0; i < 20; i++) {
		printf("%3d ", array[i]);
	}
	printf("\n");

	for (int i = SIZE -20; i < SIZE; i++) {
		printf("%3d ", array[i]);
	}
	printf("\n");
}

void generateRandomArray(int list[]) {

	srand((unsigned int)time(NULL));

	for (int i = 0; i < SIZE; i++) {
		list[i] = rand() % 1000;
	}
}
//랜덤함수 생성

int linersearch(int list[], int rand) {
	for (int i = 0; i < SIZE; i++) {
		comparecount++;
		if (list[i] == rand) {
			return i;
		}
	}
	return -1;
}
//순차 탐색 함수수

double getAverageLinearSearchCompareCount(int list[]) {
	int avgcompare = 0;

	for (int i = 0; i < 100; i++) {
		int random = list[rand() % 1000]; 
		comparecount = 0;
		linersearch(list, random);
		avgcompare +력

int main(int argc, char* argv[]) {
	srand((unsigned int)time(NULL));
	int array[SIZE];
	generateRandomArray(array);
	//여기까지 배열 저장

	printf("Average Linear Search Compare Count: %.2f\n",
		getAverageLinearSearchCompareCount(array));
	//2번 수행 완료

	getQuickSortCompareCount(array);
	printf("Quick Sort Compare Count: %d\n", comparecount);
	//3번 수행 완료

	printf("Average Binary Search Compare Count: %.2f\n\n",
		getAverageBinarySearchCompareCount(array));
	//4번 수행 완료

	printArray(array);

	return 0;
}

//퀵정렬 후의 이진탐색에서 순차탐색보다 적게 비교하는 이유를 설명
